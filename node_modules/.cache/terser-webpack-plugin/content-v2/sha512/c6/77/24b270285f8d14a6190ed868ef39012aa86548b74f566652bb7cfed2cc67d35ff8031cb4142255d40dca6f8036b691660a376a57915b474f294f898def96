{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{365:function(t,s,a){\"use strict\";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"p\",[t._v(\"Algorithm做算法题，Review点评英文文章，Tip总结技术技巧，Share做技术分享。每周打卡一次，这就是ARTS打卡。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_1-做算法题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-做算法题\"}},[t._v(\"#\")]),t._v(\" 1. 做算法题\")]),t._v(\" \"),a(\"p\",[t._v(\"LeetCode\"),a(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/merge-two-sorted-lists\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"第21题\"),a(\"OutboundLink\")],1),t._v(\"，合并两个有序列表\")]),t._v(\" \"),a(\"p\",[t._v(\"将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例：\")]),t._v(\" \"),a(\"p\",[t._v(\"输入：1->2->4, 1->3->4\\n输出：1->1->2->3->4->4\")]),t._v(\" \"),a(\"p\",[t._v(\"解题代码：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-python line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# Definition for singly-linked list.\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# class ListNode:\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#     def __init__(self, x):\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#         self.val = x\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"#         self.next = None\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Solution\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"def\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"mergeTwoLists\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" l1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" ListNode\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" l2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" ListNode\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" ListNode\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" l1 \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"is\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"None\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" l2\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"elif\")]),t._v(\" l2 \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"is\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"None\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" l1\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"elif\")]),t._v(\" l1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"val \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" l2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"val\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n            l \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" l1\\n            l\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"next\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"Solution\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"mergeTwoLists\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" l1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"next\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" l2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n            l \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" l2\\n            l\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"next\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"Solution\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"mergeTwoLists\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"self\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" l1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" l2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"next\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"            \\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" l\\n\")])]),t._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),a(\"br\")])]),a(\"p\",[t._v(\"解题思路：\")]),t._v(\" \"),a(\"p\",[t._v(\"利用递归，将问题简化为两个链表节点值大小比较，小的放入新链表中，再比较两个链表。递归算法一般比较烧脑。有个简单的比喻，递归就像你在电影院黑漆漆的，不知道自己坐在第几排，可以把问题拆解为，问前一个人第几排，再加一就是自己第几排，以此类推，直到第一排的人是直到自己位置的。再层层返回累加起来排数。这里的大问题拆成了小问题，结束问题的边界条件很重要。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2-点评英文文章\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-点评英文文章\"}},[t._v(\"#\")]),t._v(\" 2. 点评英文文章\")]),t._v(\" \"),a(\"p\",[t._v(\"英文文章\"),a(\"a\",{attrs:{href:\"http://matt.might.net/articles/what-cs-majors-should-know/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"What every computer science major should know\"),a(\"OutboundLink\")],1),t._v(\"主题是计算机专业应该掌握的知识。计算机专业应该掌握的知识包括项目经验、计算机语言、Unix哲学、技术交流、数据结构与算法、离散数学、网络、安全等几个方面。对每个方面都给出了相应的能力判别标准。如果想在计算机专业升学、就业，掌握这些知识应该差不多了。文中要求得非常全面。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_3-技术技巧\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-技术技巧\"}},[t._v(\"#\")]),t._v(\" 3. 技术技巧\")]),t._v(\" \"),a(\"p\",[t._v(\"用Docker容器可以很方便地创造一个无环境依赖的应用运行环境，建议学习\"),a(\"a\",{attrs:{href:\"https://blog.saymagic.cn/2015/06/01/learning-docker.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Docker简明教程\"),a(\"OutboundLink\")],1),t._v(\"。将容器制作为镜像文件，放在哪里都能运行。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_4-技术分享\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-技术分享\"}},[t._v(\"#\")]),t._v(\" 4. 技术分享\")]),t._v(\" \"),a(\"p\",[t._v(\"这周小试了一下华为云上的无服务器架构CCI的功能，挺好玩的。直接部署一个容器镜像就可以跑起应用，而且按照资源占用需求收费，对轻应用非常适合。写了一遍部署无服务架构应用的文章\"),a(\"a\",{attrs:{href:\"https://editor.csdn.net/md/?articleId=104809042\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"在此\"),a(\"OutboundLink\")],1),t._v(\"。\")])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}